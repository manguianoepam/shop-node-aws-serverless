# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: default
  environment:
    REGION: ${self:custom.dotenvVars.REGION, env:REGION, ''}
    BUCKET: ${self:custom.dotenvVars.BUCKET, env:BUCKET, ''}
    PATH_AWS: ${self:custom.dotenvVars.PATH_AWS, env:PATH_AWS, ''}
    SQS_URL: ${self:custom.dotenvVars.SQS_URL, env:SQS_URL, ''}
  iamRoleStatements:
    - Effect: Allow
      Action: 's3:ListBucket'
      Resource:
        - 'arn:aws:s3:::src-image-shop'
    - Effect: Allow
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::src-image-shop/*'
    - Effect: Allow
      Action: 'sqs:SendMessage'
      Resource: 'arn:aws:sqs:us-east-1:436988374415:catalogItemsQueue.fifo'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: false
    packager: 'npm'
    dotenvVars: ${./configs.js)}

functions:
  hello:
    handler: handler.hello
  getSignedImage:
    handler: images.importProductsFile
    events:
      - http:
          path: /import/{nameImage}
          method: get
          authorizer:
            arn: arn:aws:lambda:us-east-1:436988374415:function:authorization-service-dev-basicAuthorizer
            managedExternally: false
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          cors:
            origins: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              paths:
                nameImage: true
  importFileParser:
    handler: image.importFileParser
    events:
      - s3:
          bucket: src-image-shop
          event: s3:ObjectCreated:*
          rules:
            - prefix: images/
          existing: true